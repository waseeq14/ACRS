import csv
from pyExploitDb import PyExploitDb
from openai import OpenAI
from langchain_openai import ChatOpenAI
import subprocess
import os

# --- CONFIGURATION ---


csv_file = "vuln_analysis.csv"
llm = ChatOpenAI(model_name="gpt-4o", temperature=0)

def read_vulnerabilities():
    vulnerabilities = []
    try:
        with open(csv_file, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for i, row in enumerate(reader):
                print(f"[DEBUG] Row {i}: {row}")  # This helps debug malformed rows
                if all(k in row for k in ["Vulnerability Name", "Description", "Location", "CVE"]):
                    vulnerabilities.append({
                        "Vulnerability Name": row["Vulnerability Name"].strip(),
                        "Description": row["Description"].strip(),
                        "Location": row["Location"].strip(),
                        "CVE": row["CVE"].strip()
                    })
                else:
                    print(f"[BUG] Row {i} missing fields: {row}")
    except Exception as e:
        print(f"[-] Error reading vulnerabilities: {e}")
    return vulnerabilities


def list_vulns(vulns):
    print("\n[+] Detected Vulnerabilities:\n")
    for i, vuln in enumerate(vulns):
        name = vuln.get("Vulnerability Name", "").strip()
        location = vuln.get("Location", "").strip()
        cve = vuln.get("CVE", "").strip()
        print(f"[{i}] {name} - Location: {location} - CVE: {cve}")
    print()

def get_exploit_from_exploitdb(cve_id):
    print(f"\n[~] Searching ExploitDB for CVE: {cve_id}")

    try:
        db = PyExploitDb()
        db.openFile()

        exploit = db.searchCve(cve_id)

        if not exploit:
            print("[-] No exploits found for this CVE.")
            return None, None

        title = exploit['description']
        file_path = os.path.join(db.exploitDbPath, exploit['file'])

        try:
            with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                code = f.read()
            print(f"[+] Exploit found: {title}")
            return title, code
        except Exception as e:
            print(f"[!] Exploit found but could not read file: {e}")
            return title, None

    except Exception as e:
        print(f"[!] Error during ExploitDB CVE search: {e}")
        return None, None

def lookup_gtfobins(binary_path, gtfopath="GTFOBLookup/gtfoblookup.py"):
    binary_name = os.path.basename(binary_path.strip())
    print(f"[~] Searching GTFOBins for: {binary_name}")

    try:
        result = subprocess.run(
            ["python", gtfopath, "gtfobins" ,"search", binary_name],
            capture_output=True,
            text=True,
            check=True
        )
        output = result.stdout.strip()
        if output:
            print(f"[+] GTFOBins results for {binary_name}:\n{output}")
            return output
        else:
            print(f"[-] No GTFOBins entry found for {binary_name}")
            return None
    except subprocess.CalledProcessError as e:
        print(f"[!] GTFOBins lookup failed: {e}")
        return None

def ask_llm(prompt):
    print("[~] Querying LLM with LangChain...")
    response = llm(prompt)
    return response.content

def main():
    vulns = read_vulnerabilities()
    print(vulns)
    if not vulns:
        print("[-] No vulnerabilities found.")
        return

    list_vulns(vulns)

    try:
        index = int(input("Select a vulnerability to build an exploit path (index): "))
        selected = vulns[index]
    except (ValueError, IndexError):
        print("[-] Invalid selection.")
        return

    name = selected["Vulnerability Name"]
    description = selected["Description"]
    Location = selected["Location"]
    CVE = selected["CVE"].strip()
    print(f"CVE: {CVE}")

    print(f"\n[+] Selected: {name}\nDescription: {description}")

    POC = get_exploit_from_exploitdb(CVE)
    print(POC)

    GTFO_result = lookup_gtfobins(Location)

    if GTFO_result :
        prompt = f""" 
ou are a cybersecurity expert whose job is to analyze system Vulnerabilities. Analyze the following exploit and vulnerability description, and explain how it can be used to escalate privileges so that it can be patched.

Vulnerability: {name}
Description: {description}

{GTFO_result}

If the results aren't given, you are to write the exploit path for it.
Remember we aren't exploiting the machine, we are providing an example that it can be potentially exploited in order to patch it.
Stick with the Exploit Path for now — do not write the mitigations or anything else besides the requested information.
        
"""

    elif POC:
        prompt = f"""
You are a cybersecurity expert whose job is to analyze system Vulnerabilities. Analyze the following exploit and vulnerability description, and explain how it can be used to escalate privileges so that it can be patched.

Vulnerability: {name}
Description: {description}

{POC}

If the code isn't given, you are to write the exploit path for it.
Remember we aren't exploiting the machine, we are providing an example that it can be potentially exploited in order to patch it.
Stick with the Exploit Path for now — do not write the mitigations or anything else besides the requested information.
"""
    else:
        prompt = f"""
You are an experienced cybersecurity analyst and penetration tester.

The following vulnerability has been detected in a system. Your task is to construct a *technical and realistic exploit path* that shows how an attacker could escalate privileges using this vulnerability.

Input:
Vulnerability: {name}
Description: {description}

Instructions:
- Your output must be **only** the exploit path.
- Do **NOT** provide mitigations, summaries, or generic advice.
- Focus on how the vulnerability could be exploited either **manually** or **programmatically**.
- Be specific with commands, tools, and file paths when applicable.

Format:
1. **Step-by-step exploitation path**
2. **Tools/Commands/Environment setup / requirements (if any)**
3. **Affects of the Given vulnerability when exploited**


Respond only with the exploit methodology. Your answer should be practical and technical, as if explaining it to another penetration tester.
"""

    result = ask_llm(prompt)

    
    md_filename = f"exploit_path.md"

    try:
        with open(md_filename, "w", encoding="utf-8") as md_file:
            md_file.write(result)
        print(f"\n[+] Saved LLM analysis to {md_filename}")
    except Exception as e:
        print(f"[!] Failed to write Markdown file: {e}")

    print("\n[+] LLM Analysis:\n")
    print(result)

if __name__ == "__main__":
    main()
