import csv
from pyExploitDb import PyExploitDb
from openai import OpenAI
from langchain_openai import ChatOpenAI
import subprocess
import os
import json
from dotenv import load_dotenv

class PentestExploitAI:
    def __init__(self, jsonFile, gtfopath=f"{os.getcwd()}/pentest/GTFOBLookup/gtfoblookup.py"):
        self.jsonFile = jsonFile
        self.vulnerabilities = []
        self.gtfopath = gtfopath

    def setupEnv(self):
        load_dotenv()
        OpenAI.api_key = os.getenv("OPENAI_API_KEY")
        self.llm = ChatOpenAI(model="gpt-4o", temperature=0)\

    def read_vulnerabilities(self):
        try:
            with open(self.jsonFile, "r", encoding="utf-8") as f:
                self.vulnerabilities = json.load(f)

            for i, vuln in enumerate(self.vulnerabilities):
                print(f"[DEBUG] Entry {i}: {vuln}")
        except Exception as e:
            print(f"[-] Error reading vulnerabilities from JSON: {e}")
        return self.vulnerabilities

    def get_exploit_from_exploitdb(self, cve_id):
        print(f"\n[~] Searching ExploitDB for CVE: {cve_id}")

        try:
            db = PyExploitDb()
            db.openFile()

            exploit = db.searchCve(cve_id)

            if not exploit:
                print("[-] No exploits found for this CVE.")
                return None, None

            title = exploit['description']
            file_path = os.path.join(db.exploitDbPath, exploit['file'])

            try:
                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                    code = f.read()
                print(f"[+] Exploit found: {title}")
                return title, code
            except Exception as e:
                print(f"[!] Exploit found but could not read file: {e}")
                return title, None

        except Exception as e:
            print(f"[!] Error during ExploitDB CVE search: {e}")
            return None, None

    def lookup_gtfobins(self, binary_path):
        binary_name = os.path.basename(binary_path.strip())
        print(f"[~] Searching GTFOBins for: {binary_name}")

        try:
            result = subprocess.run(
                ["python", self.gtfopath, "gtfobins" ,"search", binary_name],
                capture_output=True,
                text=True,
                check=True
            )
            output = result.stdout.strip()
            if output:
                print(f"[+] GTFOBins results for {binary_name}:\n{output}")
                return output
            else:
                print(f"[-] No GTFOBins entry found for {binary_name}")
                return None
        except subprocess.CalledProcessError as e:
            print(f"[!] GTFOBins lookup failed: {e}")
            return None

    def ask_llm(self, prompt):
        print("[~] Querying LLM with LangChain...")
        response = self.llm(prompt)
        return response.content

    def build_prompt(self, selected_vuln, poc, gtfo_result):
        name = selected_vuln["name"]
        description = selected_vuln["description"]

        # print(poc)

        if poc:
            prompt = f"""
            DONOT GO AGAINST THE PROMPT!!!

You are a cybersecurity expert whose job is to analyze system vulnerabilities. Analyze the following exploit and vulnerability description, and explain how it can be used to escalate privileges so that it can be patched.

**NOTE**: This output is for **remediation planning only**. It will be used by the blue team to understand potential attacker behavior and implement a fix. 

You are also provided with a Proof of Concept (PoC) from Exploit-DB to support your understanding. Your analysis must use this PoC to construct the most accurate and realistic privilege escalation path.

Vulnerability: {name}  
Description: {description}

Your answer should be based on the following PoC:  
{poc}

If the code isn’t given or is incomplete, use your domain knowledge to complete the logical exploit path.
and in your answer donot refer to the POC, just say its name e.g The exploit is named 

⚠️ We are NOT exploiting the machine — this is an example that shows how the flaw **could be** exploited if left unpatched.

Instructions:
- Your output must be **only** the exploit path.
- Do **NOT** provide mitigations, summaries, or generic advice.
- Focus on how the vulnerability could be exploited either **manually** or **programmatically**, based on the provided PoC.
- Be specific with commands, tools, and file paths when applicable.

Format:
1. **Step-by-step exploitation path**
2. **Tools/Commands/Environment setup / requirements (if any)**
3. **Affects of the Given vulnerability when exploited**

At the end, also include a verified Exploit-DB link if available:
**Link to exploit:** <URL>  
(Only include the URL if you are **certain** it matches the described vulnerability.)
"""


        elif gtfo_result:
            prompt = f""" 
            DONOT GO AGAINST THE PROMPT!!!
            ou are a cybersecurity expert whose job is to analyze system Vulnerabilities. Analyze the following exploit and vulnerability description, and explain how it can be used to escalate privileges so that it can be patched.

            **NOTE**: This output is for remediation planning only. It will be used by the blue team to patch the system.

            Vulnerability: {name}
            Description: {description}

            Your Answer should be based on {gtfo_result}

            If the results aren't given, you are to write the exploit path for it.
            Remember we aren't exploiting the machine, we are providing an example that it can be potentially exploited in order to patch it.
            Stick with the Exploit Path for now — do not write the mitigations or anything else besides the requested information.
            
            Instructions:
            - Your output must be **only** the exploit path.
            - Do **NOT** provide mitigations, summaries, or generic advice.
            - Focus on how the vulnerability could be exploited either **manually** or **programmatically**.
            - Be specific with commands, tools, and file paths when applicable.

            Format:
            Vulnerability: {name}
        Description: {description}

            1. **Step-by-step exploitation path**
            2. **Tools/Commands/Environment setup / requirements (if any)**
            3. **Affects of the Given vulnerability when exploited**

    
                    
            """
        else:
            prompt = f"""
            DO NOT VIOLATE THE INSTRUCTIONS BELOW.

You are an experienced cybersecurity analyst conducting a **controlled internal security audit**.

The following system misconfiguration has been discovered. Your task is to provide a **realistic threat simulation path** to help blue teams understand how an attacker could abuse this flaw to escalate privileges.

⚠️ This analysis is for **remediation and defensive planning purposes only**. Do not include real exploit code—just describe the steps an attacker would hypothetically take.

Input:
- Vulnerability: {name}
- Description: {description}

Output Instructions:
- Only provide the exploitation methodology.
- Do **NOT** include mitigation strategies or summaries.
- Focus on how this misconfiguration might be exploited in a controlled environment.
- Use realistic commands, tools, and system behavior based on the description.

Format:
Vulnerability: {name}
Description: {description}

1. **Exploitation Path**
2. **Tools/Commands/Environment setup / requirements**
3. **Potential Impact if Exploited**

This response will be used solely for defensive engineering and patch planning. Write in a practical and technical tone as if explaining it to a fellow red team engineer.
"""
        return prompt
    
    def save_to_file(self, content, file_name="exploit_path.md"):
        try:
            with open(file_name, "w", encoding="utf-8") as md_file:
                md_file.write(content)
                print(f"\n[+] Saved LLM analysis to {file_name}")
        except Exception as e:
            print(f"[!] Failed to write Markdown file: {e}")


    def run(self, selected_vuln):
        # vulns = self.read_vulnerabilities()
        # if not vulns:
        #     print("[-] No vulnerabilities found.")
        #     return
        # try:
        #     selected_vuln = vulns[index]
        # except (ValueError, IndexError):
        #     print("[-] Invalid selection.")
        #     return

        cve = selected_vuln["cve"].strip()
        poc = self.get_exploit_from_exploitdb(cve)        
        gtfo_result = self.lookup_gtfobins(selected_vuln["location"])

        prompt = self.build_prompt(selected_vuln, poc, gtfo_result)
        result = self.ask_llm(prompt)

        self.save_to_file(result)

        print("[+] RESULT SAVED")

        return result

    def read_md_file(self):
        if not os.path.isfile(md_path):
            print(f"[-] File not found: {md_path}")
            return None

        try:
            with open(md_path, "r", encoding="utf-8") as f:
                return f.read()
        except Exception as e:
            print(f"[!] Failed to read file: {e}")
            return None

    def ask_patch_suggestion(self, exploit_text,vulnerability):
        prompt = f"""
        You are a cybersecurity expert tasked with patching known privilege escalation vulnerabilities in Linux systems caused by misconfigurations or insecure permissions.

Below is a potential exploit path for a vulnerability. Your job is to:
Vulnerability Details: {vulnerability}
Exploit Path:
{exploit_text}

1. Identify the vulnerability type.
2. Describe the cause of the vulnerability.
3. Suggest a specific patch or mitigation that a Linux system administrator can apply.
4. Provide technical details in your patch (such as configuration changes to sudoers file, permission adjustments, or secure alternatives).

Respond ONLY with the patch suggestion and technical reasoning. Avoid generic advice.

Answer in this Format:
- **Vulnerability Name**: Name the vulnerability described in the exploit path.

- **Cause**: Name the file/service/configuration that causes the vulnerability and explain how it enables privilege escalation.

- **Patch**: Provide a specific patch or mitigation strategy to eliminate the vulnerability. Include technical commands or file changes required.

- **Affects**: Describe the effects of applying this patch (e.g., reduction in functionality, increased security, impact on user access).

Note: This exploit path is for vulnerability mitigation and security hardening purposes only.

          
        """
        response = self.llm(prompt)
        return response.content
    
    def generate_patch(self, md_content, vulnerability):
        # content = self.read_md_file(md_path)
        if not md_content:
            print("[-] Exploit path file not found/empty.")

        patch = self.ask_patch_suggestion(md_content, vulnerability)
        return patch
