import paramiko

class Pentest:
    def __init__(self, ssh_host, ssh_user, ssh_pass):
        self.ssh_host = ssh_host
        self.ssh_user = ssh_user
        self.ssh_pass = ssh_pass
        self.ssh_client = None


    def connect(self):
        try:
            self.ssh_client = paramiko.SSHClient()
            self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh_client.connect(self.ssh_host, port=22, username=self.ssh_user,password=self.ssh_pass, timeout=3)
            print(f"[+] Connected to {self.ssh_host}")
        except Exception as e:
            print(f"[-] Connection failed: {e}")
            self.ssh_client = None

    def disconnect(self):
        if self.ssh_client:
            self.ssh_client.close()
            print("[+] Disconnected")
            self.ssh_client = None

    def execute_command(self, command):
        if self.ssh_client is None:
            print("[-] No active SSH connection. Please connect first.")
            return None
        try:
            stdin, stdout, stderr = self.ssh_client.exec_command(command)
            output = stdout.read().decode()
            error = stderr.read().decode()
            return output if output else error
        except Exception as e:
            print(f"[-] Command execution failed: {e}")
            return None

    def upload_file(self, local_file, remote_path):
        try:
            if self.ssh_client is None:
                print("[-] No active SSH connection.")
                return False
            sftp = self.ssh_client.open_sftp()
            sftp.put(local_file, remote_path)
            sftp.close()
            print(f"[+] Uploaded {local_file} to {remote_path}")
            return True
        except Exception as e:
            print(f"[-] File upload failed: {e}")
            return False

    def run_enum_scripts(self):
        try:
            if self.ssh_client:
                self.upload_file("linpeas.sh", "/tmp/linpeas.sh")
                self.upload_file("run.sh","/tmp/run.sh")
                self.execute_script("/tmp/run.sh")
        except Exception as e:
            print(f"[-] File upload failed: {e}")


    def execute_script(self, script_path):
        try:
            if self.ssh_client is None:
                print("[-] No active SSH connection.")
                return None
            
            stdin, stdout, stderr = self.ssh_client.exec_command(f"chmod +x {script_path} && {script_path}")
            
            while not stdout.channel.exit_status_ready():
                print(stdout.readline().strip())
            print("[+] Enumeration script executed successfully.")
        
        except Exception as e:
            print(f"[-] Script execution failed: {e}")

    def download_file(self, remote_path, local_path):
        try:
            if self.ssh_client is None:
                print("[-] No active SSH connection.")
                return False
            
            sftp = self.ssh_client.open_sftp()
            sftp.get(remote_path, local_path)
            sftp.close()
            print(f"[+] Downloaded {remote_path} to {local_path}")
            return True
        except Exception as e:
            print(f"[-] File download failed: {e}")
            return False
    
    def setupEnv(self):
    load_dotenv()
    OpenAI.api_key = os.getenv("OPENAI_API_KEY")
    self.llm = ChatOpenAI(model="gpt-4o", temperature=0)



if __name__ == "__main__":
    pentest = Pentest("192.168.18.118","testuser","testuser")
    pentest.connect()
    pentest.run_enum_scripts()
    pentest.download_file("/tmp/enum_results.txt", "enum_results.txt")
    
