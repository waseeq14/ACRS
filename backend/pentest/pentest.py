import paramiko
import csv

class Pentest:
    def __init__(self, ssh_host, ssh_user, ssh_pass):
        self.ssh_host = ssh_host
        self.ssh_user = ssh_user
        self.ssh_pass = ssh_pass
        self.ssh_client = None


    def connect(self):
        try:
            self.ssh_client = paramiko.SSHClient()
            self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh_client.connect(self.ssh_host, port=22, username=self.ssh_user,password=self.ssh_pass, timeout=3)
            print(f"[+] Connected to {self.ssh_host}")
        except Exception as e:
            print(f"[-] Connection failed: {e}")
            self.ssh_client = None

    def disconnect(self):
        if self.ssh_client:
            self.ssh_client.close()
            print("[+] Disconnected")
            self.ssh_client = None

    def execute_command(self, command):
        if self.ssh_client is None:
            print("[-] No active SSH connection. Please connect first.")
            return None
        try:
            stdin, stdout, stderr = self.ssh_client.exec_command(command)
            output = stdout.read().decode()
            error = stderr.read().decode()
            return output if output else error
        except Exception as e:
            print(f"[-] Command execution failed: {e}")
            return None

    def upload_file(self, local_file, remote_path):
        try:
            if self.ssh_client is None:
                print("[-] No active SSH connection.")
                return False
            sftp = self.ssh_client.open_sftp()
            sftp.put(local_file, remote_path)
            sftp.close()
            print(f"[+] Uploaded {local_file} to {remote_path}")
            return True
        except Exception as e:
            print(f"[-] File upload failed: {e}")
            return False
        
    def get_linpeas_option(self):
        options = {
            "1": "system_information",
            "2": "container,cloud",
            "3": "procs_crons_timers_srvcs_sockets",
            "4": "network_information",
            "5": "users_information",
            "6": "software_information",
            "7": "interesting_perms_files",
            "8": "interesting_files",
            "9": "api_keys_regex"
        }
        print("\nSelect LinPEAS scan option:")
        for key, value in options.items():
            print(f"{key}. {value}")
        choice = input("Enter the number corresponding to your choice: ")
        return options.get(choice, "system_information")  # Default option

    def create_run_script(self):
        selected_option = self.get_linpeas_option()
        with open("run.sh", "w") as f:
            f.write("#!/bin/bash\n\n")
            f.write("OUTPUT=\"/tmp/enum_results.txt\"\n")
            f.write("echo \"[+] Running LinPEAS\" > \"$OUTPUT\"\n")
            f.write("chmod +x /tmp/linpeas.sh\n")
            f.write(f"/tmp/linpeas.sh -q -o {selected_option} &>> \"$OUTPUT\"\n")
            f.write("echo \"[+] LinPEAS execution complete.\" >> \"$OUTPUT\"\n")
        print("[+] run.sh script created with selected LinPEAS option.")

    def run_enum_scripts(self):
        try:
            if self.ssh_client:
                self.upload_file("linpeas.sh", "/tmp/linpeas.sh")
                self.create_run_script()
                self.upload_file("run.sh","/tmp/run.sh")
                self.execute_command("sed -i 's/\r$//' /tmp/run.sh")
                self.execute_command("sed -i 's/\r$//' /tmp/linpeas.sh")
                self.execute_script("/tmp/run.sh")
        except Exception as e:
            print(f"[-] File upload failed: {e}")


    def execute_script(self, script_path):
        try:
            if self.ssh_client is None:
                print("[-] No active SSH connection.")
                return None
            
            stdin, stdout, stderr = self.ssh_client.exec_command(f"chmod +x {script_path} && {script_path}")
            
            while not stdout.channel.exit_status_ready():
                print(stdout.readline().strip())
            print("[+] Enumeration script executed successfully.")
        
        except Exception as e:
            print(f"[-] Script execution failed: {e}")

    def download_file(self, remote_path, local_path):
        try:
            if self.ssh_client is None:
                print("[-] No active SSH connection.")
                return False
            
            sftp = self.ssh_client.open_sftp()
            sftp.get(remote_path, local_path)
            sftp.close()
            print(f"[+] Downloaded {remote_path} to {local_path}")
            return True
        except Exception as e:
            print(f"[-] File download failed: {e}")
            return False
    
    def setupEnv(self):
    load_dotenv()
    OpenAI.api_key = os.getenv("OPENAI_API_KEY")
    self.llm = ChatOpenAI(model="gpt-4o", temperature=0)

    
    def analyze_vulns(self, file_path):
        with open(file_path, "r", encoding="utf-8", errors="ignore") as file:
            linpeas_output = file.read()

        messages = [
        f"You are a cybersecurity expert analyzing vulnerability reports. "
        "Analyze the following LinPEAS scan results and identify only confirmed vulnerabilities. "
        "For each vulnerability, provide the following details:\n\n"
        "- **Name of the vulnerability** (Do NOT provide CVE names, just describe the vulnerability)\n"
        "- **Detailed description** (Explain what the vulnerability is and why it exists)\n"
        "- **How it can be exploited** (Step-by-step explanation of how an attacker can exploit this vulnerability, including necessary conditions and attack vectors)\n"
        "- **Where it is located** (Specify the exact file, configuration, or system component where this vulnerability exists)\n\n"
        "Return the output in CSV format where each row contains:\n"
        "[Vulnerability Name, Description, Exploitation Method, Location]\n\n"
        "LinPEAS Output:\n" + linpeas_output
    ]

        response = self.llm(messages)

        # Print the results
        print("\n[+] Vulnerability Analysis:\n")
        print(response.content)

        # Define the output CSV file
        output_file = "vuln_analysis.csv"

        try:
            # Write response content to CSV file
            with open(output_file, "w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)

                # Read response content and split into lines
                lines = response.content.strip().split("\n")

                # Write each row after stripping spaces
                for line in lines:
                    parts = [p.strip() for p in line.split(",") if p.strip()]
                    if len(parts) == 4:  # Ensure correct row format
                        writer.writerow(parts)

            print(f"\n[+] Analysis saved to {output_file}")

        except Exception as e:
            print(f"\n[-] Error writing to CSV file: {e}")


if __name__ == "__main__":
    pentest = Pentest("192.168.18.118","testuser","testuser")
    pentest.connect()
    pentest.run_enum_scripts()
    pentest.download_file("/tmp/enum_results.txt", "enum_results.txt")
    #pentest.setupEnv()
    #pentest.analyze_vulns("enum_results.txt")
    
    
