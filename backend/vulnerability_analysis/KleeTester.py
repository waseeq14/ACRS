import os
import sys
import shutil
from dotenv import load_dotenv
from langchain.chat_models import ChatOpenAI
from klee import KleeProcessor
from klee2 import KleeProcessor2  

class KleeTester:
    def __init__(self, file_path):
        self.file_path = file_path
        self.file_name = os.path.basename(file_path)
        self.test_name = os.path.splitext(self.file_name)[0]

        # Base: testing/<test_name>/
        self.base_folder = os.path.join(os.path.dirname(__file__), "testing", self.test_name)
        self.full_folder = os.path.join(self.base_folder, "full")
        self.segment_folder = os.path.join(self.base_folder, "segments")

        os.makedirs(self.full_folder, exist_ok=True)
        os.makedirs(self.segment_folder, exist_ok=True)

        # Save original file in both folders
        shutil.copy2(self.file_path, os.path.join(self.full_folder, self.file_name))
        shutil.copy2(self.file_path, os.path.join(self.segment_folder, self.file_name))

        # LLM setup
        load_dotenv()
        self.llm = ChatOpenAI(model="gpt-4o", temperature=0)

    def run(self):
        print(f"\n[+] Running full code KLEE analysis for {self.file_name}")
        full_results, full_vulns, full_code = self.run_full()

        print(f"\n[+] Running segmented KLEE analysis for {self.file_name}")
        seg_results, seg_vulns, segments = self.run_segments()

        return {
            "full": {
                "results": full_results,
                "vuln_names": full_vulns,
                "code": full_code,
                "path": self.full_folder
            },
            "segments": {
                "results": seg_results,
                "vuln_names": seg_vulns,
                "segments": segments,
                "path": self.segment_folder
            }
        }

    def run_full(self):
        try:
            process = KleeProcessor(self.file_path, self.llm, self.full_folder)
            code = process.preprocess_code_with_llm()
            process.generate_llvm_ir()
            process.run_klee()
            process.klee_stats(self.full_folder)
            results, vuln_names = process.parse_klee_output()
            print("[+] Full code analysis completed.")
            return results, vuln_names, code
        except Exception as e:
            print("[-] Error occurred (FULL):", e)
            return None, None, None

    def run_segments(self):
        try:
            process = KleeProcessor2(self.file_path, self.llm, self.segment_folder)
            segments = process.extract_vulnerable_segments()
            process.generate_llvm_ir_for_segments()
            results, vuln_names = process.run_klee_on_segments2()
            print("[+] Segment-based analysis completed.")
            return results, vuln_names, segments
        except Exception as e:
            print("[-] Error occurred (SEGMENTS):", e)
            return None, None, None


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python KleeTester.py <source_file.c>")
        sys.exit(1)

    file_path = sys.argv[1]

    if not os.path.exists(file_path) or not file_path.endswith(".c"):
        print("[-] Invalid C file path provided.")
        sys.exit(1)

    tester = KleeTester(file_path)
    result = tester.run()

    print("\n[+] Vulnerabilities (Full):", result["full"]["vuln_names"])
    print("[+] Vulnerabilities (Segments):", result["segments"]["vuln_names"])
