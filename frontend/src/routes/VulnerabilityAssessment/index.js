import { useState, useRef, useContext } from 'react'
import { AppContext } from '../../context/AppContext'
import { useNavigate } from 'react-router'
import classNames from 'classnames'
import Markdown from 'react-markdown'
import api from '../../utils/api'

import styles from './styles.module.css'

// const code =
//   'int main() {\n\tint *a = malloc(0x50);\n\tfree(a);\n\tint *d = malloc(0x50);\n\tfree(d);\n\tfree(d);\n\tprint(a);\n\treturn 1;\n}'

// const statistics = 'Vulnerability found: Use After Free\n\nCWE-ID : CWE-416'
// const staticAnalysis =
//   "[*] Starting analysis from 'main' function:\n\n\nAnalyzing function 'main'\nAssigned variable: a\nAssigned variable: d\nDouble-Free Warning: 'd' freed again at line 7\nUse-After-Free detected: 'a' at line 8, originally freed at line 4\nCritical function detected: 'malloc' at line 3\nCritical function detected: 'free' at line 4\nCritical function detected: 'malloc' at line 5\nCritical function detected: 'free' at line 6\nCritical function detected: 'free' at line 7\nCritical function detected: 'printf' at line 8"
// const dynamicAnalysis =
//   "LLM Response:\n\nVulnerability Assessment: Use After Free\n\nExtracted Vulnerability Assessment Keyword: 'Use After Free'\n\nSearching for CWEs matching keyword: 'Use After Free'\n\nMatching CWE-IDs for keyword 'Use After Free':\nCWE-ID: 416, Name: Use After Free\n\nVulnerable function found: printf at address 0x400000\nStarting symbolic execution at address 0x400000..."

export default function VulnerabilityAssessment() {
  const navigate = useNavigate()

  const { appState, setAppState } = useContext(AppContext)

  const [fileContent, setFileContent] = useState(appState.fileContent ?? '')
  const [headerFilePath, setHeaderFilPath] = useState('')
  const [selectedLanguage, setSelectedLanguage] = useState('c')
  const [loading, setLoading] = useState(false)

  const fileInputRef = useRef(null)

  const onUploadClick = () => {
    fileInputRef.current.click() // Trigger file input click
  }

  const handleFileChange = event => {
    const file = event.target.files[0] // Get the selected file
    if (!file) return

    const reader = new FileReader()

    // Read text content
    reader.onload = e => {
      setFileContent(e.target.result)
    }

    reader.readAsText(file)
  }
  const onSubmitClick = async () => {
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}/file-save/`,
        {
          ext: selectedLanguage,
          contents: fileContent
        },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          },
        }
      )
      setAppState({
        ...appState,
        filePath: response.data.file_path,
        fileContent: fileContent
      })
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }
  const onRunKleeClick = async () => {
    if (!appState.filePath) {
      alert('No code provided!')
      return
    }
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}`,
        {
          analysis_type: 'symbolic',
          file_path: appState.filePath
        },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        kleeResult: { analysis: response.data.result, code: response.data.code }
      })

      navigate('/dashboard/va/klee')
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const onRunPriotizePaths = async () => {
    if (!appState.filePath) {
      alert('No code provided!')
      return
    }
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}`,
        {
          analysis_type: 'symbolic2',
          file_path: appState.filePath
        },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        advancedKleeResult: {
          analysis: response.data.result,
          segments: response.data.segments
        }
      })

      navigate('/dashboard/va/advanced_klee')

      console.log(response.data)
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const onRunFuzzer = async () => {
    if (!appState.filePath) {
      alert('No code provided!')
      return
    }
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}`,
        {
          analysis_type: 'asan',
          file_path: appState.filePath
        },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        fuzzerResult: {
          analysis: response.data.result,
          code: response.data.code,
          seeds: response.data.seeds
        }
      })

      navigate('/dashboard/va/fuzzer')
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const onApplyRulesClick = async () => {
    if (!appState.filePath) {
      alert('No code provided!')
      return
    }
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}`,
        {
          analysis_type: 'rules',
          file_path: appState.filePath
        },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      console.log(response.data)

      setAppState({ ...appState, rulesResult: response.data.result })
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const onApplyPatch = async () => {
    if (!appState.filePath) {
      alert('No code provided!')
      return
    }
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}/patch/`,
        { file_path: appState.filePath },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        patchResult: {
          code: response.data.result.code,
          description: response.data.result.description
        }
      })

      navigate('/dashboard/patch')
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const onGenerateExploitPath = async () => {
    if (!appState.filePath) {
      alert('No code provided!')
      return
    }
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}/exploit/`,
        { file_path: appState.filePath },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        exploitResult: {
          result: response.data.result,
        }
      })

      navigate('/dashboard/exploit')
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const onGenerateReport = () => {
    const parts = appState.filePath.split("/");
    const id = parts[parts.length - 2];
  
    window.open(
      `${process.env.REACT_APP_BACKEND_URL}/get-report?id=${id}`,
      '_blank',
      'noopener,noreferrer'
    )
  }

  return (
    <>
      <div className={styles.miniCard}>
        <p
          className={selectedLanguage === 'c' ? styles.selected : null}
          onClick={() => setSelectedLanguage('c')}
        >
          C
        </p>
        <p
          className={selectedLanguage === 'cpp' ? styles.selected : null}
          onClick={() => setSelectedLanguage('cpp')}
        >
          C++
        </p>
      </div>
      <div className={classNames(styles.card, styles.noHeight)}>
        <input 
          type='text' 
          value={headerFilePath} 
          onChange={e => setHeaderFilPath(e.target.value)}
          placeholder='Header files path'
        />
      </div>
      <div style={{ height: '0.5rem' }}></div>
      <div className={styles.card}>
        <textarea
          placeholder='Enter code'
          value={fileContent}
          onChange={e => setFileContent(e.target.value)}
          contentEditable={true}
        ></textarea>
        <div className={styles.buttonLayout}>
          <input
            type='file'
            ref={fileInputRef}
            onChange={handleFileChange}
            className={styles.hidden}
          />
          <button onClick={onUploadClick}>Upload</button>
          <button onClick={onSubmitClick}>Submit</button>
        </div>
      </div>
      <div style={{ height: '1rem' }}></div>
      <div className={classNames(styles.card, styles.spread, styles.noHeight)}>
        <button type='button' onClick={onApplyRulesClick}>
            Static Rules
        </button>
        <button type='button' onClick={onRunKleeClick}>
          Symbolic Execution
        </button>
        <button type='button' onClick={onRunPriotizePaths}>
          Prioritize Code Paths
        </button>
        <button type='button' onClick={onRunFuzzer}>
          Fuzz
        </button>
      </div>
      {
        (appState.rulesResult || appState.kleeResult || appState.advancedKleeResult || appState.fuzzerResult) && (
          <>
            <div style={{ height: '1rem' }}></div>
            <div className={classNames(styles.card, styles.spread, styles.noHeight)}>
              <button type='button' onClick={onApplyPatch}>
                Apply Patch
              </button>
              <button type='button' onClick={onGenerateExploitPath}>
                Generate Exploit Path
              </button>
              <button type='button' onClick={onGenerateReport}>
                Generate Report
              </button>
            </div>
          </>
        )
      }
      {loading && (
        <>
          <div style={{ height: '1rem' }}></div>
          <div className={classNames(styles.card, styles.noHeight)}>
            <div className={styles.loadingBar}>
              <div></div>
            </div>
          </div>
        </>
      )}
      {appState.rulesResult ? (
        <>
          <div style={{ height: '1rem' }}></div>
          <div className={classNames(styles.card, styles.noHeight, styles.white)}>
            <h2>Rules Result</h2>
            {typeof appState.rulesResult === 'string' ? (
              <Markdown>{appState.rulesResult}</Markdown>
            ) : (
              <table>
                <thead>
                  <tr>
                    <th>Snippet</th>
                    <th>Analysis</th>
                  </tr>
                </thead>
                <tbody>
                  {appState.rulesResult.map((result, index) => (
                    <tr key={index}>
                      <td>{result.snippet}</td>
                      <td>
                        <Markdown>{result.ai_analysis}</Markdown>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </>
      ) : null}

      {/* <div class={styles.cards}>
        <div class={styles.card}>
          <h2>Statistics</h2>
          <textarea className={styles.whiteTextArea} readOnly={true}>
            {statistics}
          </textarea>
        </div>
        <div class={styles.card}>
          <h2>Static Analysis</h2>
          <textarea className={styles.whiteTextArea} readOnly={true}>
            {staticAnalysis}
          </textarea>
        </div>
        <div class={styles.card}>
          <h2>Dynamic Analysis</h2>
          <textarea className={styles.whiteTextArea} readOnly={true}>
            {dynamicAnalysis}
          </textarea>
        </div>
      </div> */}
    </>
  )
}
