from pwnFramework import ExploitFramework
import langchain
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI, OpenAI
from langchain_core.prompts import ChatPromptTemplate
import os

load_dotenv()
OpenAI.api_key = os.getenv("OPENAI_API_KEY")
llm = ChatOpenAI(model="gpt-4o", temperature=0)

path = "./vuln"
framework = ExploitFramework(binary_path=path, source_code="source.c")
staticResult = framework.perform_static_analysis()
source_code = framework.readFile("source.c")


prompt_template = ChatPromptTemplate([
    ((("system", """
You are a CTF player and a binary exploitation expert. Your task is to exploit a vulnerable binary using tools like gdb, cyclic, ropper, ROPgadget, and Pwntools.

Here are your guidelines:
1. Suggest **one command at a time** to analyze or exploit the binary.
2. After every command, its output will be added to the context for your reference.
3. Use your findings to develop a complete exploit using Pwntools when enough information is gathered.

Initial Context:
-Binary Path:
{path}
- Source Code:
{source_code}
- Static Analysis Results:
{staticResult}

Now, suggest the first command to execute. Provide only the command, nothing else, it will directly go to shell.
""")
)
)
])

#prompt_template.invoke({"source_code": source_code, "staticResult":staticResult})
prompt = prompt_template.format_prompt(
    source_code=source_code,
    path = path,
    staticResult=staticResult
)

context = []
response = llm.invoke(prompt)

print(response.content)  

