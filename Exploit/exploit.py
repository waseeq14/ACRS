from pwnFramework import ExploitFramework
import re
from gdb_shell import GdbShell
from llm import *

framework = ExploitFramework(binary_path="vuln", source_path="source.c")
framework.perform_static_analysis()

context = []

exploit_path_context = get_exploit_path(framework.source_code, framework.static_analysis)
print("Exploit Path:\n", exploit_path_context)

cmd = get_first_command(exploit_path_context, framework.source_code, framework.binary_path, framework.static_analysis)
where_to_run = ''
print("Initial command: ", cmd)

while(True):
    if "PLEASE EXIT" in cmd:
        print(cmd)
        break

    if "gdb" in cmd:
        context.append(f'Command {len(context) + 1}\n{cmd}\n')
        gdb = GdbShell(framework.binary_path)
        gdb.start_shell()
        while(True):
            if 'close gdb' in cmd:
                context.append(f'Command {len(context) + 1}\n{cmd}\n')
                cmd = get_next_command(exploit_path_context, framework.source_code, framework.binary_path, framework.static_analysis, ''.join(context))
                gdb.stop_shell()
                break

            print("Recieved command: ", cmd)

            cmd = get_next_command(exploit_path_context, framework.source_code, framework.binary_path, framework.static_analysis, ''.join(context))
            output = gdb.execute_command(cmd)
            print(output)

            output_summary = get_output_summary(cmd, output)
            context.append(f'Command {len(context) + 1}\n{cmd}\n{output_summary}\n')

    else:
        cmd_to_run = re.search('^\((.+)\)\s?(.+)', cmd)
        print("Non gdb command: ", cmd)
        where_to_run = cmd_to_run.group(1)
        cmd = cmd_to_run.group(2) 
        if where_to_run == 'shell':
            output = framework.run_command(cmd)

            output_summary = get_output_summary(cmd, output)
            context.append(f'Command {len(context) + 1}\n{cmd}\n{output_summary}\n')
            print(context)

            cmd = get_next_command(exploit_path_context, framework.source_code, framework.binary_path, framework.static_analysis, ''.join(context))
            print(cmd)
